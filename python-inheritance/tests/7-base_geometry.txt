The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Import the class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test instantiation:
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Test area method:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print(e)
    area() is not implemented

Test integer validator with valid integers:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Test integer validator with string:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

Test integer validator with zero:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Test integer validator with negative value:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

Test integer validator with float:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("float", 3.14)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] float must be an integer

Test integer validator with boolean:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("boolean", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] boolean must be an integer

Test integer validator with None:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test integer validator with list:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("list", [1, 2, 3])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] list must be an integer

Test integer validator with missing arguments:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test integer validator with one argument:
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'
